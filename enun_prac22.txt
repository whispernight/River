Enunciado de la práctica 2.2 del curso 05/06


Se tiene un archivo de texto (RIO.DAT) organizado por líneas, con los datos de las precipitaciones (en metros cúbicos) de los afluentes de un río para los meses de un año. En el caso de que en un mes no haya habido precipitaciones para algún afluente, dicha información no aparecerá en el archivo. Ningún nombre de afluente excede de 10 letras.
A continuación se muestra un ejemplo de archivo de datos para el río Tajo:

-------  entrada  ---------------
Alagon 1 1000 1000 1000
Alberche 9 10000 2000
Guadarrama 4 2000 1000 1000
Alberche 1 2000 2000 1000 1000
Guadarrama 9 3000 2000 1000 1000
Jarama 10 8000 2000 1000
Tietar 2 8000 6000 8000 8000
---------------------------------

En el ejemplo anterior, la segunda línea indicaría que el afluente "Alberche" en el mes de septiembre (9) recibió dos precipitaciones de 10.000 y 2.000 metros cúbicos. 

Se pide, escribir un programa iterativo en Ada que a partir de un archivo de texto como el especificado construya otro que cumpla los siguientes requisitos:
1.-El total de precipitaciones en cada mes del año (ordenadas de mayor a menor). Es decir, 12 líneas y en cada línea, el identificativo del mes y el total de precipitaciones en ese mes. 
2.- El afluente que haya acumulado más precipitaciones en el año y el total de las mismas. En la línea 13.

Para el ejemplo del río Tajo:

-----  salida  ------
2  30000
9  19000
10 11000
1  9000
4  4000
3  0
5  0
6  0
7  0
8  0
11 0
12 0
Tietar 30000
---------------------

Se quiere que el programa explore dos ficheros de entrada de nombres "rio1.dat" y "rio2.dat" y para cada uno de ellos construya los respectivos "rio1.res" y "rio2.res". 

Se adjunta el archivo "rio.dat" como ejemplo para que el alumno realice sus comprobaciones.


Recomendaciones:

1. Para procesar la información relativa a las precipitaciones mensuales se recomienda utilizar una colección indexada de ocupación fija (ColIndexFija), donde los índices sean los meses (del 1 al 12) y los elementos, las precipitaciones del mes correspondiente.

max : CONSTANT Natural := 12;
SUBTYPE TipoIndice IS Natural RANGE 1..max;
SUBTYPE TipoElemento IS Natural;
TYPE TipoColAbierta IS ARRAY (Positive RANGE <>) OF TipoElemento;
SUBTYPE TipoColIndexFija IS TipoColAbierta (TipoIndice);



2. Para procesar la información relativa a las precipitaciones en cada afluente se recomienda utilizar una colección indexada de ocupación variable (ColIndexVar), donde cada elemento es un par (afluente, precipitaciones). Se puede fijar un máximo para el ARRAY de elementos, que para la realización y corrección de la práctica fijaremos en 20.

max : CONSTANT Natural := 20;
SUBTYPE TipoIndice IS Natural RANGE 1..max;
SUBTYPE TipoElemento IS 
	RECORD
	   afluente : String (1..10);
	   precipitaciones : Natural;
        END RECORD;

TYPE TipoColAbierta IS ARRAY (Positive RANGE <>) OF TipoElemento;
SUBTYPE TipoColIndexFija IS TipoColAbierta (TipoIndice);
TYPE TipoColIndexVar IS 
	RECORD
	  longitud : Natural := 0;
	  elementos : TipoColIndexFija;
        END RECORD;

3. Para los nombres de afluentes se recomienda usar un String de 10 elementos.
